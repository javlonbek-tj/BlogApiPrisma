2023-11-22 17:33:15: error: Error in starting server Configuration property "clientUrl" is not defined
2023-11-22 20:41:26: error: Error in starting server Configuration property "clientUrl" is not defined
2023-11-23 15:21:50: error: 
Invalid `db.user.create()` invocation in
C:\Users\j.turdimatov\Desktop\Новая папка\Desktop\Mine\Main\BlogApi\src\services\auth.service.ts:20:30

  17 }
  18 const hashedPassword = await bcrypt.hash(password, 10);
  19 const activationLink = v4();
→ 20 const user = await db.user.create(
Null constraint violation on the fields: (`postViewerId`)
2023-11-23 15:31:01: error: [
  {
    "code": "too_small",
    "minimum": 8,
    "type": "string",
    "inclusive": true,
    "exact": false,
    "message": "Password must be more than 8 characters",
    "path": [
      "body",
      "password"
    ]
  },
  {
    "code": "custom",
    "path": [
      "body",
      "passwordConfirm"
    ],
    "message": "Passwords do not match"
  }
]
2023-11-23 16:45:54: error: Unexpected token } in JSON at position 52
2023-11-23 17:00:25: error: Cannot destructure property 'jwt' of 'req.cookies' as it is undefined.
2023-11-23 17:00:54: error: Cannot destructure property 'jwt' of 'req.cookies' as it is undefined.
2023-11-23 17:00:55: error: Cannot destructure property 'jwt' of 'req.cookies' as it is undefined.
2023-11-23 17:01:18: error: Cannot destructure property 'jwt' of 'req.cookies' as it is undefined.
2023-11-23 17:02:26: error: Cannot destructure property 'jwt' of 'req.cookies' as it is undefined.
2023-11-23 17:02:40: error: Cannot destructure property 'jwt' of 'req.cookies' as it is undefined.
2023-11-23 17:03:31: error: Cannot destructure property 'jwt' of 'req.cookies' as it is undefined.
2023-11-23 17:03:53: error: Cannot destructure property 'jwt' of 'req.cookies' as it is undefined.
2023-11-28 09:52:05: error: 
Invalid `db.user.findUnique()` invocation in
C:\Users\j.turdimatov\Desktop\Новая папка\Desktop\Mine\Main\BlogApi\src\services\user.service.ts:187:38

  184 };
  185 
  186 const updateUserInfo = async (userId: string, input: updateUserInput) => {
→ 187   const isEmailTaken = await db.user.findUnique({
          where: {
            email: undefined,
        ?   id?: String,
        ?   AND?: UserWhereInput | UserWhereInput[],
        ?   OR?: UserWhereInput[],
        ?   NOT?: UserWhereInput | UserWhereInput[],
        ?   firstname?: StringFilter | String,
        ?   lastname?: StringFilter | String,
        ?   profilPhoto?: StringNullableFilter | String | Null,
        ?   password?: StringFilter | String,
        ?   isBlocked?: BoolFilter | Boolean,
        ?   role?: EnumRoleEnumTypeFilter | RoleEnumType,
        ?   userAward?: EnumAwardEnumTypeFilter | AwardEnumType,
        ?   isActivated?: BoolFilter | Boolean,
        ?   activationLink?: StringFilter | String,
        ?   passwordChangedAt?: DateTimeNullableFilter | DateTime | Null,
        ?   passwordResetToken?: StringNullableFilter | String | Null,
        ?   passwordResetExpires?: DateTimeNullableFilter | DateTime | Null,
        ?   createdAt?: DateTimeFilter | DateTime,
        ?   updatedAt?: DateTimeFilter | DateTime,
        ?   postViewerId?: StringNullableFilter | String | Null,
        ?   postLikeId?: StringNullableFilter | String | Null,
        ?   postDislikeId?: StringNullableFilter | String | Null,
        ?   viewerId?: StringNullableFilter | String | Null,
        ?   followerId?: StringNullableFilter | String | Null,
        ?   followingId?: StringNullableFilter | String | Null,
        ?   blockingId?: StringNullableFilter | String | Null,
        ?   viewers?: UserListRelationFilter,
        ?   followers?: UserListRelationFilter,
        ?   followings?: UserListRelationFilter,
        ?   posts?: PostListRelationFilter,
        ?   comments?: CommentListRelationFilter,
        ?   blockings?: UserListRelationFilter,
        ?   token?: TokenNullableRelationFilter | TokenWhereInput | Null,
        ?   postViewer?: PostNullableRelationFilter | PostWhereInput | Null,
        ?   postLike?: PostNullableRelationFilter | PostWhereInput | Null,
        ?   postDislike?: PostNullableRelationFilter | PostWhereInput | Null,
        ?   viewer?: UserNullableRelationFilter | UserWhereInput | Null,
        ?   follower?: UserNullableRelationFilter | UserWhereInput | Null,
        ?   following?: UserNullableRelationFilter | UserWhereInput | Null,
        ?   blocking?: UserNullableRelationFilter | UserWhereInput | Null
          }
        })

Argument `where` of type UserWhereUniqueInput needs at least one of `id` or `email` arguments. Available options are marked with ?.
2023-11-28 11:24:24: error: 
Invalid `db.user.findUnique()` invocation in
C:\Users\j.turdimatov\Desktop\Новая папка\Desktop\Mine\Main\BlogApi\src\services\user.service.ts:187:38

  184 };
  185 
  186 const updateUserInfo = async (userId: string, input: updateUserInput) => {
→ 187   const isEmailTaken = await db.user.findUnique({
          where: {
            email: undefined,
        ?   id?: String,
        ?   AND?: UserWhereInput | UserWhereInput[],
        ?   OR?: UserWhereInput[],
        ?   NOT?: UserWhereInput | UserWhereInput[],
        ?   firstname?: StringFilter | String,
        ?   lastname?: StringFilter | String,
        ?   profilPhoto?: StringNullableFilter | String | Null,
        ?   password?: StringFilter | String,
        ?   isBlocked?: BoolFilter | Boolean,
        ?   role?: EnumRoleEnumTypeFilter | RoleEnumType,
        ?   userAward?: EnumAwardEnumTypeFilter | AwardEnumType,
        ?   isActivated?: BoolFilter | Boolean,
        ?   activationLink?: StringFilter | String,
        ?   passwordChangedAt?: DateTimeNullableFilter | DateTime | Null,
        ?   passwordResetToken?: StringNullableFilter | String | Null,
        ?   passwordResetExpires?: DateTimeNullableFilter | DateTime | Null,
        ?   createdAt?: DateTimeFilter | DateTime,
        ?   updatedAt?: DateTimeFilter | DateTime,
        ?   postViewerId?: StringNullableFilter | String | Null,
        ?   postLikeId?: StringNullableFilter | String | Null,
        ?   postDislikeId?: StringNullableFilter | String | Null,
        ?   viewerId?: StringNullableFilter | String | Null,
        ?   followerId?: StringNullableFilter | String | Null,
        ?   followingId?: StringNullableFilter | String | Null,
        ?   blockingId?: StringNullableFilter | String | Null,
        ?   viewers?: UserListRelationFilter,
        ?   followers?: UserListRelationFilter,
        ?   followings?: UserListRelationFilter,
        ?   posts?: PostListRelationFilter,
        ?   comments?: CommentListRelationFilter,
        ?   blockings?: UserListRelationFilter,
        ?   token?: TokenNullableRelationFilter | TokenWhereInput | Null,
        ?   postViewer?: PostNullableRelationFilter | PostWhereInput | Null,
        ?   postLike?: PostNullableRelationFilter | PostWhereInput | Null,
        ?   postDislike?: PostNullableRelationFilter | PostWhereInput | Null,
        ?   viewer?: UserNullableRelationFilter | UserWhereInput | Null,
        ?   follower?: UserNullableRelationFilter | UserWhereInput | Null,
        ?   following?: UserNullableRelationFilter | UserWhereInput | Null,
        ?   blocking?: UserNullableRelationFilter | UserWhereInput | Null
          }
        })

Argument `where` of type UserWhereUniqueInput needs at least one of `id` or `email` arguments. Available options are marked with ?.
2023-11-28 16:07:24: error: 
Invalid `db.post.create()` invocation in
C:\Users\j.turdimatov\Desktop\Новая папка\Desktop\Mine\Main\BlogApi\src\services\post.service.ts:5:30

  2 import db from '../utils/db';
  3 
  4 const create = async (authorId: string, { title, description, photo }: CreatePostInput) => {
→ 5   const post = await db.post.create({
        data: {
          title: "New book public",
          description: "Awesome book ever",
          photo: "sfsfsfsd",
          authorId: undefined,
      +   author: {
      +     create: UserCreateWithoutPostsInput | UserUncheckedCreateWithoutPostsInput,
      +     connectOrCreate: UserCreateOrConnectWithoutPostsInput,
      +     connect: UserWhereUniqueInput
      +   }
        }
      })

Argument `author` is missing.
2023-11-28 16:08:50: error: 
Invalid `db.post.create()` invocation in
C:\Users\j.turdimatov\Desktop\Новая папка\Desktop\Mine\Main\BlogApi\src\services\post.service.ts:5:30

  2 import db from '../utils/db';
  3 
  4 const create = async (authorId: string, { title, description, photo }: CreatePostInput) => {
→ 5   const post = await db.post.create({
        data: {
          title: "New book public",
          description: "Awesome book ever",
          photo: "sfsfsfsd",
          authorId: undefined,
      +   author: {
      +     create: UserCreateWithoutPostsInput | UserUncheckedCreateWithoutPostsInput,
      +     connectOrCreate: UserCreateOrConnectWithoutPostsInput,
      +     connect: UserWhereUniqueInput
      +   }
        }
      })

Argument `author` is missing.
2023-11-28 16:09:57: error: 
Invalid `db.post.create()` invocation in
C:\Users\j.turdimatov\Desktop\Новая папка\Desktop\Mine\Main\BlogApi\src\services\post.service.ts:5:30

  2 import db from '../utils/db';
  3 
  4 const create = async (authorId: string, { title, description, photo }: CreatePostInput) => {
→ 5   const post = await db.post.create({
        data: {
          title: "New book public",
          description: "Awesome book ever",
          photo: "sfsfsfsd",
          authorId: undefined,
      +   author: {
      +     create: UserCreateWithoutPostsInput | UserUncheckedCreateWithoutPostsInput,
      +     connectOrCreate: UserCreateOrConnectWithoutPostsInput,
      +     connect: UserWhereUniqueInput
      +   }
        }
      })

Argument `author` is missing.
2023-11-28 16:10:47: error: 
Invalid `db.post.create()` invocation in
C:\Users\j.turdimatov\Desktop\Новая папка\Desktop\Mine\Main\BlogApi\src\services\post.service.ts:5:30

  2 import db from '../utils/db';
  3 
  4 const create = async (authorId: string, { title, description, photo }: CreatePostInput) => {
→ 5   const post = await db.post.create({
        data: {
          title: "New book public",
          description: "Awesome book ever",
          photo: "sfsfsfsd",
          authorId: undefined,
      +   author: {
      +     create: UserCreateWithoutPostsInput | UserUncheckedCreateWithoutPostsInput,
      +     connectOrCreate: UserCreateOrConnectWithoutPostsInput,
      +     connect: UserWhereUniqueInput
      +   }
        }
      })

Argument `author` is missing.
2023-11-28 16:10:49: error: 
Invalid `db.post.create()` invocation in
C:\Users\j.turdimatov\Desktop\Новая папка\Desktop\Mine\Main\BlogApi\src\services\post.service.ts:5:30

  2 import db from '../utils/db';
  3 
  4 const create = async (authorId: string, { title, description, photo }: CreatePostInput) => {
→ 5   const post = await db.post.create({
        data: {
          title: "New book public",
          description: "Awesome book ever",
          photo: "sfsfsfsd",
          authorId: undefined,
      +   author: {
      +     create: UserCreateWithoutPostsInput | UserUncheckedCreateWithoutPostsInput,
      +     connectOrCreate: UserCreateOrConnectWithoutPostsInput,
      +     connect: UserWhereUniqueInput
      +   }
        }
      })

Argument `author` is missing.
2023-11-28 18:20:13: error: 
Invalid `db.user.delete()` invocation in
C:\Users\j.turdimatov\Desktop\Новая папка\Desktop\Mine\Main\BlogApi\src\services\user.service.ts:317:23

  314 };
  315 
  316 const deleteAccount = async (userId: string) => {
→ 317   await db.user.delete(
Foreign key constraint failed on the field: `Token_userId_fkey (index)`
2023-11-28 18:21:12: error: 
Invalid `db.user.delete()` invocation in
C:\Users\j.turdimatov\Desktop\Новая папка\Desktop\Mine\Main\BlogApi\src\services\user.service.ts:317:23

  314 };
  315 
  316 const deleteAccount = async (userId: string) => {
→ 317   await db.user.delete(
Foreign key constraint failed on the field: `Token_userId_fkey (index)`
2023-11-28 18:55:12: error: 
Invalid `db.post.create()` invocation in
C:\Users\j.turdimatov\Desktop\Новая папка\Desktop\Mine\Main\BlogApi\src\services\post.service.ts:6:30

  3 import db from '../utils/db';
  4 
  5 const create = async (authorId: string, { title, description, photo, categories }: CreatePostInput) => {
→ 6   const post = await db.post.create(
An operation failed because it depends on one or more records that were required but not found. Expected 2 records to be connected, found only 1.
2023-11-29 10:56:48: error: 
Invalid `db.post.update()` invocation in
C:\Users\j.turdimatov\Desktop\Новая папка\Desktop\Mine\Main\BlogApi\src\services\post.service.ts:62:17

  59 if (isViewed) {
  60   return post;
  61 }
→ 62 await db.post.update({
       where: {
         id: "8bc3962a-603d-4259-a271-0e58a56373eb"
       },
       data: {
         numViews: {
           connect: {
             id: undefined
           }
           ~~~~~~~~~~~~~~~
         }
       }
     })

Argument `connect`: Invalid value provided. Expected UserWhereUniqueInput[], provided Object.
2023-11-29 12:51:26: error: 
Invalid `db.post.findMany()` invocation in
C:\Users\j.turdimatov\Desktop\Новая папка\Desktop\Mine\Main\BlogApi\src\services\post.service.ts:22:31

  19 };
  20 
  21 const allPosts = async (userId: string) => {
→ 22   const posts = await db.post.findMany(
Unknown nested field 'viewers' for operation comments does not match any query.
2023-11-29 12:51:34: error: 
Invalid `db.post.findMany()` invocation in
C:\Users\j.turdimatov\Desktop\Новая папка\Desktop\Mine\Main\BlogApi\src\services\post.service.ts:22:31

  19 };
  20 
  21 const allPosts = async (userId: string) => {
→ 22   const posts = await db.post.findMany(
Unknown nested field 'viewers' for operation comments does not match any query.
2023-11-29 13:55:18: error: 
Invalid `db.post.findMany()` invocation in
C:\Users\j.turdimatov\Desktop\Новая папка\Desktop\Mine\Main\BlogApi\src\services\post.service.ts:22:31

  19 };
  20 
  21 const allPosts = async (userId: string) => {
→ 22   const posts = await db.post.findMany(
Unknown nested field 'viewers' for operation comments does not match any query.
2023-11-29 13:55:32: error: 
Invalid `db.post.findMany()` invocation in
C:\Users\j.turdimatov\Desktop\Новая папка\Desktop\Mine\Main\BlogApi\src\services\post.service.ts:22:31

  19 };
  20 
  21 const allPosts = async (userId: string) => {
→ 22   const posts = await db.post.findMany(
Unknown nested field 'viewers' for operation comments does not match any query.
2023-11-29 13:56:01: error: 
Invalid `db.post.findMany()` invocation in
C:\Users\j.turdimatov\Desktop\Новая папка\Desktop\Mine\Main\BlogApi\src\services\post.service.ts:22:31

  19 };
  20 
  21 const allPosts = async (userId: string) => {
→ 22   const posts = await db.post.findMany(
Unknown nested field 'viewers' for operation comments does not match any query.
2023-11-30 15:28:40: error: Unexpected end of form
2023-11-30 15:47:24: error: ENOENT: no such file or directory, open 'C:\Users\j.turdimatov\Desktop\Новая папка\Desktop\Mine\Main\BlogApi\uploads\C:\Users\j.turdimatov\Desktop\Новая папка\Desktop\Mine\Main\BlogApi\uploads\2023-11-30-image_2023-11-21_10-42-35.png'
2023-11-30 15:50:34: error: ENOENT: no such file or directory, open 'C:\Users\j.turdimatov\Desktop\Новая папка\Desktop\Mine\Main\BlogApi\uploads\C:\Users\j.turdimatov\Desktop\Новая папка\Desktop\Mine\Main\BlogApi\uploads\2023-11-30-image_2023-11-21_10-42-35.png'
2023-11-30 16:01:14: error: ENOENT: no such file or directory, open 'C:\uploads\2023-11-30\2023-11-30-image_2023-11-21_10-42-35.png'
