// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String        @id @default(uuid())
  firstname            String
  lastname             String
  profilPhoto          String?
  email                String
  password             String
  isBlocked            Boolean       @default(false)
  role                 RoleEnumType  @default(USER)
  viewers              User[]        @relation("Viewer", references: [id])
  followers            User[]        @relation("Follower", references: [id])
  following            User[]        @relation("Following", references: [id])
  posts                Post[]        @relation("UserPost", references: [id])
  comments             Comment[]     @relation("UserComment", references: [id])
  blocked              User[]        @relation("BlockedUser", references: [id])
  userAward            AwardEnumType @default(BRONZE)
  isActivated          Boolean       @default(false)
  activationLink       String?
  passwordChangedAt    DateTime?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  User                 User?         @relation(fields: [userId], references: [id])
  userId               String?
  User                 User?         @relation(fields: [userId], references: [id])
  userId               String?
  User                 User?         @relation(fields: [userId], references: [id])
  userId               String?
  User                 User?         @relation(fields: [userId], references: [id])
  userId               String?
  Post                 Post?         @relation(fields: [postId], references: [id])
  postId               String?
  Post                 Post?         @relation(fields: [postId], references: [id])
  postId               String?
  Post                 Post?         @relation(fields: [postId], references: [id])
  postId               String?
  Comment              Comment[]
  Token                Token?
}

model Post {
  id          String    @id @default(uuid())
  title       String
  description String
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  numViews    User[]    @relation("PostNumViews", references: [id])
  likes       User[]    @relation("PostLikes", references: [id])
  dislikes    User[]    @relation("PostDislikes", references: [id])
  comments    Comment[] @relation("PostComments", references: [id])
  author      User      @relation("UserPost", fields: [authorId], references: [id])
  authorId    String
  photo       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Comment     Comment[]
}

model Category {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Post      Post[]
}

model Comment {
  id          String   @id @default(uuid())
  post        Post     @relation(fields: [postId], references: [id])
  postId      String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id])
  Post        Post     @relation(fields: [postId], references: [id])
}

model Token {
  id           String @id @default(uuid())
  userToken    User   @relation(fields: [userTokenId], references: [id])
  userTokenId  Int    @unique
  refreshToken String
}

enum RoleEnumType {
  USER
  ADMIN
  EDITOR
}

enum AwardEnumType {
  BRONZE
  SILVER
  GOLD
}
